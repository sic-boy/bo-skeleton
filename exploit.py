#!/usr/bin/env python
#
# Template for remote TCP exploit code
##

import os
import sys
import struct
import resource
import time

from socket import *
import telnetlib
class TCPClient():
    def __init__(self, host, port):
        self.sock = socket(AF_INET, SOCK_STREAM)
        self.sock.connect((host, port))

    def send(self, data, delay=0):
        if delay:
            time.sleep(delay)
        nsend = self.sock.send(data)
        return nsend

    def sendline(self, data, delay=0):
        nsend = self.send(data + "\n", delay)
        return nsend

    def recv(self, size=1024, delay=0):
        if delay:
            time.sleep(delay)
        buf = self.sock.recv(size)
        return buf

    def recv_until(self, delim):
        buf = ""
        while True:
            c = self.sock.recv(1)
            buf += c
            if delim in buf:
                break
        return buf

    def recvline(self):
        buf = self.recv_until("\n")
        return buf

    def close(self):
        self.sock.close()

def conv(addr):
	return struct.pack('<I', addr)

def pattern_create(length):
    upper="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower="abcdefghijklmnopqrstuvwxyz"
    number="0123456789"
        
    pattern = ""
    while len(pattern) < length:
        for ch1 in upper:
            for ch2 in lower:
                for ch3 in number:
                    pattern += ch1 + ch2 + ch3
                    if len(pattern) >= size:
                        return pattern[:size]
    return pattern

def usage():
    print "Usage: %s host port" % sys.argv[0]
    return

def exploit(host, port):
    port = int(port)
    client = TCPClient(host, port)
 
    # Send payload
    raw_input("Enter to continue")
    client.send(request)
    print client.recvline()

if __name__ == "__main__":
    if len(sys.argv) < 3:
        usage()
    else:
        exploit(sys.argv[1], sys.argv[2])
    
